/*

undefined
Personal document object

!!! AUTO GENERATED BY CONVERT.TS REFRAIN FROM MANUAL EDITING !!!

*/

import * as t from 'io-ts';
import * as Units_ from 'maas-schemas-ts/core/components/units';

type Defined =
  | Record<string, unknown>
  | Array<unknown>
  | string
  | boolean
  | number
  | null;
const Defined = t.union([
  t.UnknownRecord,
  t.UnknownArray,
  t.string,
  t.boolean,
  t.number,
  t.null,
]);

export const schemaId = 'http://maasglobal.com/core/personal-document.json';

// DocumentType
// The purpose of this remains a mystery
export type DocumentType = t.Branded<string, DocumentTypeBrand>;
export const DocumentType = t.brand(
  t.string,
  (x): x is t.Branded<string, DocumentTypeBrand> => true,
  'DocumentType',
);
export interface DocumentTypeBrand {
  readonly DocumentType: unique symbol;
}

// DocumentStatus
// The purpose of this remains a mystery
export type DocumentStatus = t.Branded<string, DocumentStatusBrand>;
export const DocumentStatus = t.brand(
  t.string,
  (x): x is t.Branded<string, DocumentStatusBrand> => true,
  'DocumentStatus',
);
export interface DocumentStatusBrand {
  readonly DocumentStatus: unique symbol;
}

// PersonalDocument
// The default export. More information at the top.
export type PersonalDocument = t.Branded<
  {
    identityId?: Units_.IdentityId;
    type?: DocumentType;
    documentNumber?: string;
    nameOnDocument?: string;
    issuingCountry?: string;
    status?: DocumentStatus;
    validFrom?: Units_.Time;
    validTo?: Units_.Time;
    details?: {
      category?: string;
    };
  } & {
    type: Defined;
    documentNumber: Defined;
    nameOnDocument: Defined;
    issuingCountry: Defined;
    status: Defined;
    validFrom: Defined;
    validTo: Defined;
    details: Defined;
  },
  PersonalDocumentBrand
>;
export const PersonalDocument = t.brand(
  t.intersection([
    t.partial({
      identityId: Units_.IdentityId,
      type: DocumentType,
      documentNumber: t.string,
      nameOnDocument: t.string,
      issuingCountry: t.string,
      status: DocumentStatus,
      validFrom: Units_.Time,
      validTo: Units_.Time,
      details: t.partial({
        category: t.string,
      }),
    }),
    t.type({
      type: Defined,
      documentNumber: Defined,
      nameOnDocument: Defined,
      issuingCountry: Defined,
      status: Defined,
      validFrom: Defined,
      validTo: Defined,
      details: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      identityId?: Units_.IdentityId;
      type?: DocumentType;
      documentNumber?: string;
      nameOnDocument?: string;
      issuingCountry?: string;
      status?: DocumentStatus;
      validFrom?: Units_.Time;
      validTo?: Units_.Time;
      details?: {
        category?: string;
      };
    } & {
      type: Defined;
      documentNumber: Defined;
      nameOnDocument: Defined;
      issuingCountry: Defined;
      status: Defined;
      validFrom: Defined;
      validTo: Defined;
      details: Defined;
    },
    PersonalDocumentBrand
  > => true,
  'PersonalDocument',
);
export interface PersonalDocumentBrand {
  readonly PersonalDocument: unique symbol;
}

export default PersonalDocument;

// Success
