/*

undefined
MaaS region schema

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';
import * as Units_ from './components/units';
import * as Card_ from './card';

export type Defined = {} | null;
export class DefinedType extends t.Type<Defined> {
  readonly _tag: 'DefinedType' = 'DefinedType';
  constructor() {
    super(
      'defined',
      (u): u is Defined => typeof u !== 'undefined',
      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),
      t.identity,
    );
  }
}
export interface DefinedC extends DefinedType {}
export const Defined: DefinedC = new DefinedType();

export const schemaId = 'http://maasglobal.com/core/paymentSource.json';

// PaymentSource
// The default export. More information at the top.
export type PaymentSource = t.Branded<
  {
    id?: string;
    customerId?: Units_.IdentityId;
    type?: string &
      (
        | 'card'
        | 'paypal_express_checkout'
        | 'amazon_payments'
        | 'direct_debit'
        | 'generic'
        | 'alipay'
        | 'unionpay'
        | 'apple_pay'
      );
    gateway?: string;
    gatewayId?: string;
    temporaryToken?: string;
    status?: string;
    valid?: boolean;
    card?: Card_.Card;
  } & {
    customerId: Defined;
    type: Defined;
  },
  PaymentSourceBrand
>;
export type PaymentSourceC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        id: t.StringC;
        customerId: typeof Units_.IdentityId;
        type: t.IntersectionC<
          [
            t.StringC,
            t.UnionC<
              [
                t.LiteralC<'card'>,
                t.LiteralC<'paypal_express_checkout'>,
                t.LiteralC<'amazon_payments'>,
                t.LiteralC<'direct_debit'>,
                t.LiteralC<'generic'>,
                t.LiteralC<'alipay'>,
                t.LiteralC<'unionpay'>,
                t.LiteralC<'apple_pay'>,
              ]
            >,
          ]
        >;
        gateway: t.StringC;
        gatewayId: t.StringC;
        temporaryToken: t.StringC;
        status: t.StringC;
        valid: t.BooleanC;
        card: typeof Card_.Card;
      }>,
      t.TypeC<{
        customerId: typeof Defined;
        type: typeof Defined;
      }>,
    ]
  >,
  PaymentSourceBrand
>;
export const PaymentSource: PaymentSourceC = t.brand(
  t.intersection([
    t.partial({
      id: t.string,
      customerId: Units_.IdentityId,
      type: t.intersection([
        t.string,
        t.union([
          t.literal('card'),
          t.literal('paypal_express_checkout'),
          t.literal('amazon_payments'),
          t.literal('direct_debit'),
          t.literal('generic'),
          t.literal('alipay'),
          t.literal('unionpay'),
          t.literal('apple_pay'),
        ]),
      ]),
      gateway: t.string,
      gatewayId: t.string,
      temporaryToken: t.string,
      status: t.string,
      valid: t.boolean,
      card: Card_.Card,
    }),
    t.type({
      customerId: Defined,
      type: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      id?: string;
      customerId?: Units_.IdentityId;
      type?: string &
        (
          | 'card'
          | 'paypal_express_checkout'
          | 'amazon_payments'
          | 'direct_debit'
          | 'generic'
          | 'alipay'
          | 'unionpay'
          | 'apple_pay'
        );
      gateway?: string;
      gatewayId?: string;
      temporaryToken?: string;
      status?: string;
      valid?: boolean;
      card?: Card_.Card;
    } & {
      customerId: Defined;
      type: Defined;
    },
    PaymentSourceBrand
  > => true,
  'PaymentSource',
);
export interface PaymentSourceBrand {
  readonly PaymentSource: unique symbol;
}

export default PaymentSource;

// Success
