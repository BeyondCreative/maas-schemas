/*

undefined
MaaS state schemas

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';
import * as Units_ from './units';

export type Defined = {} | null;
export class DefinedType extends t.Type<Defined> {
  readonly _tag: 'DefinedType' = 'DefinedType';
  constructor() {
    super(
      'defined',
      (u): u is Defined => typeof u !== 'undefined',
      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),
      t.identity,
    );
  }
}
export interface DefinedC extends DefinedType {}
export const Defined: DefinedC = new DefinedType();

export const schemaId =
  'http://maasglobal.com/core/components/subscriptionChangeState.json';

// SubscriptionChangeState
// The default export. More information at the top.
export type SubscriptionChangeState = t.Branded<
  {
    id?: Units_.Uuid;
    state?: string & ('IN_PROGRESS' | 'COMPLETED' | 'FAILED');
    created?: Units_.Time;
    failureKey?: string & ('UNKNOWN_ERROR' | 'NOT_ELIGIBLE' | 'EXISTING_TICKET');
  } & {
    id: Defined;
    state: Defined;
  },
  SubscriptionChangeStateBrand
>;
export type SubscriptionChangeStateC = t.BrandC<
  t.IntersectionC<
    [
      t.PartialC<{
        id: typeof Units_.Uuid;
        state: t.IntersectionC<
          [
            t.StringC,
            t.UnionC<
              [t.LiteralC<'IN_PROGRESS'>, t.LiteralC<'COMPLETED'>, t.LiteralC<'FAILED'>]
            >,
          ]
        >;
        created: typeof Units_.Time;
        failureKey: t.IntersectionC<
          [
            t.StringC,
            t.UnionC<
              [
                t.LiteralC<'UNKNOWN_ERROR'>,
                t.LiteralC<'NOT_ELIGIBLE'>,
                t.LiteralC<'EXISTING_TICKET'>,
              ]
            >,
          ]
        >;
      }>,
      t.TypeC<{
        id: typeof Defined;
        state: typeof Defined;
      }>,
    ]
  >,
  SubscriptionChangeStateBrand
>;
export const SubscriptionChangeState: SubscriptionChangeStateC = t.brand(
  t.intersection([
    t.partial({
      id: Units_.Uuid,
      state: t.intersection([
        t.string,
        t.union([t.literal('IN_PROGRESS'), t.literal('COMPLETED'), t.literal('FAILED')]),
      ]),
      created: Units_.Time,
      failureKey: t.intersection([
        t.string,
        t.union([
          t.literal('UNKNOWN_ERROR'),
          t.literal('NOT_ELIGIBLE'),
          t.literal('EXISTING_TICKET'),
        ]),
      ]),
    }),
    t.type({
      id: Defined,
      state: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      id?: Units_.Uuid;
      state?: string & ('IN_PROGRESS' | 'COMPLETED' | 'FAILED');
      created?: Units_.Time;
      failureKey?: string & ('UNKNOWN_ERROR' | 'NOT_ELIGIBLE' | 'EXISTING_TICKET');
    } & {
      id: Defined;
      state: Defined;
    },
    SubscriptionChangeStateBrand
  > => true,
  'SubscriptionChangeState',
);
export interface SubscriptionChangeStateBrand {
  readonly SubscriptionChangeState: unique symbol;
}

export default SubscriptionChangeState;

// Success
