/*

undefined
MaaS subscription option schema

!!! AUTO GENERATED BY IOTSFJS REFRAIN FROM MANUAL EDITING !!!
See https://www.npmjs.com/package/io-ts-from-json-schema

*/

import * as t from 'io-ts';
import * as Common_ from '../../core/components/common';
import * as PersonalDataAllowItem_ from '../../core/components/personalDataAllowItem';
import * as PersonalDataValidation_ from '../../core/components/personalDataValidation';
import * as Subscription_ from './subscription';

type Defined =
  | Record<string, unknown>
  | Array<unknown>
  | string
  | boolean
  | number
  | null;
const Defined = t.union([
  t.UnknownRecord,
  t.UnknownArray,
  t.string,
  t.boolean,
  t.number,
  t.null,
]);

export const schemaId =
  'http://maasglobal.com/maas-backend/subscriptions/subscriptionOption.json';

// SubscriptionAdditions
// The purpose of this remains a mystery
export type SubscriptionAdditions = t.Branded<
  {
    discounts?: Array<unknown>;
    requiredAuthorizations?: Array<Common_.AgencyId>;
    regionDefault?: boolean;
    personalDataCreateAllow?: Array<PersonalDataAllowItem_.PersonalDataAllowItem>;
    personalDataValidations?: Array<PersonalDataValidation_.PersonalDataValidation>;
  } & {
    plan: Defined;
    wmpGrant: Defined;
    pointCost: Defined;
    addons: Defined;
    coupons: Defined;
    requiredAuthorizations: Defined;
    regionDefault: Defined;
  },
  SubscriptionAdditionsBrand
>;
export const SubscriptionAdditions = t.brand(
  t.intersection([
    t.partial({
      discounts: t.UnknownArray,
      requiredAuthorizations: t.array(Common_.AgencyId),
      regionDefault: t.boolean,
      personalDataCreateAllow: t.array(PersonalDataAllowItem_.PersonalDataAllowItem),
      personalDataValidations: t.array(PersonalDataValidation_.PersonalDataValidation),
    }),
    t.type({
      plan: Defined,
      wmpGrant: Defined,
      pointCost: Defined,
      addons: Defined,
      coupons: Defined,
      requiredAuthorizations: Defined,
      regionDefault: Defined,
    }),
  ]),
  (
    x,
  ): x is t.Branded<
    {
      discounts?: Array<unknown>;
      requiredAuthorizations?: Array<Common_.AgencyId>;
      regionDefault?: boolean;
      personalDataCreateAllow?: Array<PersonalDataAllowItem_.PersonalDataAllowItem>;
      personalDataValidations?: Array<PersonalDataValidation_.PersonalDataValidation>;
    } & {
      plan: Defined;
      wmpGrant: Defined;
      pointCost: Defined;
      addons: Defined;
      coupons: Defined;
      requiredAuthorizations: Defined;
      regionDefault: Defined;
    },
    SubscriptionAdditionsBrand
  > => true,
  'SubscriptionAdditions',
);
export interface SubscriptionAdditionsBrand {
  readonly SubscriptionAdditions: unique symbol;
}

// SubscriptionOption
// The default export. More information at the top.
export type SubscriptionOption = t.Branded<
  Subscription_.SubscriptionBase & SubscriptionAdditions,
  SubscriptionOptionBrand
>;
export const SubscriptionOption = t.brand(
  t.intersection([Subscription_.SubscriptionBase, SubscriptionAdditions]),
  (
    x,
  ): x is t.Branded<
    Subscription_.SubscriptionBase & SubscriptionAdditions,
    SubscriptionOptionBrand
  > => true,
  'SubscriptionOption',
);
export interface SubscriptionOptionBrand {
  readonly SubscriptionOption: unique symbol;
}

export default SubscriptionOption;

// Success
